/**
 * Generated by orval v7.1.1 🍺
 * Do not edit manually.
 * Post API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  NewPost,
  Post
} from '../../types'



/**
 * @summary Retrieve all posts
 */
export type getPostsResponse = {
  data: Post[];
  status: number;
}

export const getGetPostsUrl = () => {


  return `http://localhost:3000/posts`
}

export const getPosts = async ( options?: RequestInit): Promise<getPostsResponse> => {
  
  const res = await fetch(getGetPostsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}



export const getGetPostsQueryKey = () => {
    return [`http://localhost:3000/posts`] as const;
    }

    
export const getGetPostsQueryOptions = <TData = Awaited<ReturnType<typeof getPosts>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPostsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPosts>>> = ({ signal }) => getPosts({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPostsQueryResult = NonNullable<Awaited<ReturnType<typeof getPosts>>>
export type GetPostsQueryError = unknown


export function useGetPosts<TData = Awaited<ReturnType<typeof getPosts>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPosts>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetPosts<TData = Awaited<ReturnType<typeof getPosts>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPosts>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetPosts<TData = Awaited<ReturnType<typeof getPosts>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Retrieve all posts
 */

export function useGetPosts<TData = Awaited<ReturnType<typeof getPosts>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetPostsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new post
 */
export type postPostsResponse = {
  data: Post;
  status: number;
}

export const getPostPostsUrl = () => {


  return `http://localhost:3000/posts`
}

export const postPosts = async (newPost: NewPost, options?: RequestInit): Promise<postPostsResponse> => {
  
  const res = await fetch(getPostPostsUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      newPost,)
  }

  )
  const data = await res.json()

  return { status: res.status, data }
}




export const getPostPostsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postPosts>>, TError,{data: NewPost}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof postPosts>>, TError,{data: NewPost}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postPosts>>, {data: NewPost}> = (props) => {
          const {data} = props ?? {};

          return  postPosts(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostPostsMutationResult = NonNullable<Awaited<ReturnType<typeof postPosts>>>
    export type PostPostsMutationBody = NewPost
    export type PostPostsMutationError = unknown

    /**
 * @summary Create a new post
 */
export const usePostPosts = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postPosts>>, TError,{data: NewPost}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof postPosts>>,
        TError,
        {data: NewPost},
        TContext
      > => {

      const mutationOptions = getPostPostsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
